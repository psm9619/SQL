mid_3 [k] <- gsub(r, i, mid_3[k])
}
}
#----
mid_4 <- mid_3
mid_4 <- gsub ("개재\\S*","재미", mid_4)
mid_4 <- gsub ("고마\\S*", "고마움", mid_4)
mid_4 <-gsub ( "깜\\S*" , "깜짝", mid_4)
mid_4 <-gsub ("재\\S*", "재미", mid_4)
mid_4 <-gsub ("기다\\S*", "기다림", mid_4)
mid_4 <-gsub ("꿀\\S*", "재미", mid_4)
mid_4 <-gsub ( "놀\\S*","놀다", mid_4)
mid_4 <-gsub ("느끼\\S*", "느낌", mid_4)
mid_4 <-gsub ("돈\\S*", "돈아까움", mid_4)
mid_4 <-gsub (  "돌아\\S*" , "돌아간기분", mid_4)
mid_4 <-gsub ("두번\\S*", "두번보세요", mid_4)
mid_4 <-gsub ("떠나보\\S*", "떠나보냄", mid_4)
mid_4 <-gsub ("떠\\S*", "떠남", mid_4)
mid_4 <-gsub ("또보\\S*" , "또보고싶음", mid_4)
mid_4 <-gsub ( "만나\\S*", "만남", mid_4)
mid_4 <-gsub ("많\\S*", "많음", mid_4)
mid_4 <-gsub ( "보고싶\\S*", "보고싶을거야", mid_4)
mid_4 <-gsub ( "못느\\S*", "못느낌", mid_4)
mid_4 <-gsub ("빵\\S*","빵빵터짐", mid_4)
mid_4 <-gsub ("슬\\S*", "슬픔", mid_4)
mid_4 <-gsub ( "애\\S*","아이들", mid_4)
mid_4 <-gsub ( "어린\\S*", "어린시절", mid_4)
mid_4 <-gsub ("울\\S*", "울음", mid_4)
mid_4 <-gsub ( "잊\\S*", "잊혀짐", mid_4)
mid_4 <-gsub ( "재밌\\S*", "재미", mid_4)
mid_4 <-gsub ("좋\\S*", "좋음", mid_4)
mid_4 <-gsub ("픽사\\S*", "픽사다움", mid_4)
mid_review_final <- Filter(function(x) {nchar(x) >= 2 & nchar(x) <= 10}, mid_4)
```
#### 아래는 평점 3 점 이하의 평론 분석이다.
```{r}
data4 <- data1 %>%
filter(score <= 3)
neg_review_data <- data4$review
neg_review <- sapply(neg_review_data, extractNoun, USE.NAMES = F)
neg_review <- unlist(neg_review)
# 전처리는 위에서 사용한 것과 같은 방법으로 한다.
sub <- readLines('sub.txt')
neg_2 <- neg_review
for (i in sub) {
for (k in 1:length(neg_2)) {
neg_2 [k] <- gsub(i, "", neg_2[k])
}
}
#----
neg_3 <- neg_2
for (i in rep) {
r <- paste0(i, "\\S*")
for (k in 1:length(neg_3)) {
neg_3 [k] <- gsub(r, i, neg_3[k])
}
}
#----
neg_4 <- neg_3
neg_4 <- gsub ("개재\\S*","재미", neg_4)
neg_4 <- gsub ("고마\\S*", "고마움", neg_4)
neg_4 <-gsub ( "깜\\S*" , "깜짝", neg_4)
neg_4 <-gsub ("재\\S*", "재미", neg_4)
neg_4 <-gsub ("기다\\S*", "기다림", neg_4)
neg_4 <-gsub ("꿀\\S*", "재미", neg_4)
neg_4 <-gsub ( "놀\\S*","놀다", neg_4)
neg_4 <-gsub ("느끼\\S*", "느낌", neg_4)
neg_4 <-gsub ("돈\\S*", "돈아까움", neg_4)
neg_4 <-gsub (  "돌아\\S*" , "돌아간기분", neg_4)
neg_4 <-gsub ("두번\\S*", "두번보세요", neg_4)
neg_4 <-gsub ("떠나보\\S*", "떠나보냄", neg_4)
neg_4 <-gsub ("떠\\S*", "떠남", neg_4)
neg_4 <-gsub ("또보\\S*" , "또보고싶음", neg_4)
neg_4 <-gsub ( "만나\\S*", "만남", neg_4)
neg_4 <-gsub ("많\\S*", "많음", neg_4)
neg_4 <-gsub ( "보고싶\\S*", "보고싶을거야", neg_4)
neg_4 <-gsub ( "못느\\S*", "못느낌", neg_4)
neg_4 <-gsub ("빵\\S*","빵빵터짐", neg_4)
neg_4 <-gsub ("슬\\S*", "슬픔", neg_4)
neg_4 <-gsub ( "애\\S*","아이들", neg_4)
neg_4 <-gsub ( "어린\\S*", "어린시절", neg_4)
neg_4 <-gsub ("울\\S*", "울음", neg_4)
neg_4 <-gsub ( "잊\\S*", "잊혀짐", neg_4)
neg_4 <-gsub ( "재밌\\S*", "재미", neg_4)
neg_4 <-gsub ("좋\\S*", "좋음", neg_4)
neg_4 <-gsub ("픽사\\S*", "픽사다움", neg_4)
neg_review_final <- Filter(function(x) {nchar(x) >= 2 & nchar(x) <= 10}, neg_4)
```
#### pos, mid, neg 레벨의 리뷰를 각각 table 화, 그리고 data frame 화 한다.
```{r}
table.pos <- table(pos_review_final)
table.mid <- table(mid_review_final)
table.neg <- table(neg_review_final)
df.pos <- as.data.frame(table.pos) %>% arrange(desc(Freq)) %>%
mutate(review = pos_review_final)
df.mid <- as.data.frame(table.mid) %>% arrange(desc(Freq)) %>%
mutate(review = mid_review_final)
df.neg <- as.data.frame(table.neg) %>% arrange(desc(Freq)) %>%
mutate(review = neg_review_final)
df.pos_2 <- df.pos %>%
select(review, Freq) %>%
head(200)
df.mid_2 <- df.mid %>%
select(review, Freq) %>%
head(200)
df.neg_2 <- df.neg %>%
select(review, Freq) %>%
head(200)
```
** wordcloud2 의 버그 문제로 html 에 뜨지 않는 그래픽은 별개로 제출함
```{r}
wordcloud2(df.pos_2,
size=1, col="random-light",
backgroundColor="black")
wordcloud2(df.mid_2,
size=1, col="random-light",
backgroundColor="black")
wordcloud2(df.neg_2,
size=1, col="random-light",
backgroundColor="black")
```
<br>
#### 총 세 단계로 구분된 리뷰들에서 모두 공통적으로 쓰인 단어를 common_3sets 으로 정의한다. 또한 긍정과 부정 리뷰에서 공통적으로 쓰인 단어를 common_PosNeg 라고 이름하였다.
#### 긍정적인 리뷰 (평점 8~10) 에서만 쓰인 단어 top 20 과 부정적인 리뷰 (평점 1~3) 단어 top 20 을 각각 대조하였다.
```{r}
common_3sets <- intersect(intersect(df.pos_2$review, df.mid_2$review), df.neg_2$review)
common_PosNeg <- intersect(df.pos_2$review, df.neg_2$review)
head(common_PosNeg)
only_Pos <- df.pos_2 %>%
filter(!review %in% common_PosNeg) %>%
arrange(desc(Freq)) %>%
head(30)
only_Neg <- df.neg_2 %>%
filter(!review %in% common_PosNeg) %>%
arrange(desc(Freq)) %>%
head(30)
Pos_Neg <- data.frame (only_Pos30 = only_Pos$review, p.Freq = only_Pos$Freq,
only_Neg30 =  only_Neg$review, n.Freq = only_Neg$Fre)
Pos_Neg
```
#### word cloud 비교
```{r}
a <- ggplot(Pos_Neg, aes(label = only_Pos30, size = p.Freq, color=p.Freq)) +
geom_text_wordcloud_area(shape="diamond") +
scale_size_area(max_size = 24) +
theme(panel.background = element_rect(fill = 'grey3')) +
scale_color_gradient(low = "yellow", high = "orange")
b <- ggplot(Pos_Neg, aes(label = only_Neg30, size = n.Freq, color=n.Freq)) +
geom_text_wordcloud_area(shape="diamond") +
scale_size_area(max_size = 24) +
theme(panel.background = element_rect(fill = 'grey3')) +
scale_color_gradient(low = "white", high = "blue")
ggarrange (a,b)
```
이로써 긍정적인 리뷰의 대표적인 언어는 일반적으로도 긍정과 칭찬의 의미를 갖는, '최고', '좋음' 등과 위의 통합 언어분석에서도 지속적으로 눈에 띈 '어린 시절', '향수' 등과 맥락을 함께하는 '여윤', '어른', '성장' 등의 의미가 대표적으로 보인다. 또 영화사인 픽사에 대한 호의적인 태도 도 눈에 띈다.
반면 부정적인 리뷰의 대표적인 언어는, 매우 강한 어조로 부정을 이야기하는 태도가 눈에 띄었다. 예를 들면 '최악', '노잼', '붕괴' 등의 매우 파괴적인 언어의 사용이 있었으며, '억지', '무시', '짜증' 등의 감정적인 반응도도 매우 부정적이다. 또한 '감독', '멤버', '악역', '주제' 등의 영화사 자체보다 제작자들과 구성원들에 대한 조금 더 직접적인 비난의도가 드러난다고 할 수 있다.
이로서 6/20 일 개봉한 토이스토리 4 에 대한 현재까지의 관객 반응도를, Naver Movie 크롤링과 word cloud 분석을 통해 알아보았다.
<br> <br>
library(stringr)
library(rvest)
library(rJava)
library(dplyr)
library(KoNLP)
library(ggwordcloud)
library(wordcloud)
library(wordcloud2)
library(tm)
library(stringr)
library(ggplot2)
library(ggpubr)
useSejongDic()
#mergeUserDic(data.frame("")) -> 내가 필요로 하는 단어가 사전에 없을 시 추가하는 것 (ex. 지명)
library(RColorBrewer)
library(devtools)
devtools::install_github("lchiffon/wordcloud2")
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
a <- ggplot(Pos_Neg, aes(label = only_Pos30, size = p.Freq, color=p.Freq)) +
geom_text_wordcloud_area(shape="diamond") +
scale_size_area(max_size = 24) +
theme(panel.background = element_rect(fill = 'grey3')) +
scale_color_gradient(low = "yellow", high = "orange")
b <- ggplot(Pos_Neg, aes(label = only_Neg30, size = n.Freq, color=n.Freq)) +
geom_text_wordcloud_area(shape="diamond") +
scale_size_area(max_size = 24) +
theme(panel.background = element_rect(fill = 'grey3')) +
scale_color_gradient(low = "white", high = "blue")
ggarrange (a,b)
require(gam)
install.packages("gam")
require(gam)
#install.packages("gam")
library(ISLR)
#install.packages("gam")
#install.packageS("ISLR")
library(ISLR)
#install.packages("gam")
install.packageS("ISLR")
#install.packages("gam")
install.packages("ISLR")
#install.packages("gam")
#install.packages("ISLR")
library(ISLR)
attach(Wage)
Wage
head(Wage)
View(Wage)
?Wage
?gam()
str(Wage)
?Wage
table(Wage$year)
table(Wage$age)
g1 <- gam(wage~s(age, df=6)+s(year, df=6)+
education, data = Wage)
g1
summary(g1)
par(mfrow=c(1,3))
plot(g1, se = TRUE)
par(mfrow=c(1,1))
plot(g1, select=3, shade=TRUE,
scale=0, seWithMean = TRUE)
plot(g1, select=1, shade=TRUE,
scale=0, seWithMean = TRUE)
plot(g1, select=1, shade=TRUE,
scale=0, seWithMean = TRUE)
summary(g1)
g1 <- gam(wage~s(age)+s(year, df=6)+
education, data = Wage)
summary(g1)
g1 <- gam(wage~s(age)+s(year)+
education, data = Wage)
summary(g1)
par(mfrow=c(1,3))
plot(g1, se = TRUE)
g1 <- gam(wage~s(age, 6)+s(year, 6)+
education, data = Wage)
summary(g1)
par(mfrow=c(1,3))
plot(g1, se = TRUE)
par(mfrow=c(1,1))
g1 <- gam(wage~s(age, df=6)+s(year, df=6)+
education, data = Wage)
summary(g1)
par(mfrow=c(1,3))
plot(g1, se = TRUE)
library(tm)
setwd("D:/Workspace/SQL_Linux_Hadoop/Linux_Hadoop/Hadoop")
library(tm)
library(wordcloud2)
nixon <- read.csv("test_nixon.csv", stringsAsFactors = F)
nixon <- read.csv("test_nixon.csv", stringsAsFactors = F)
obama <- read.csv("test_obama.csv", stringsAsFactors = F)
roosevelt <- read.csv("test_roosevelt.csv", stringsAsFactors = F)
tonyb <- read.csv("test_tony.csv", stringsAsFactors = F)
trump <- read.csv("test_trump.csv", stringsAsFactors = F)
head(nixon)
library(dplyr)
head(obama)
i <- i %>% arrange(desc(X1))
li[0]
li <- list(nixon, obama, roosevelt, tonyb, trump)
for (i in li) {
i <- i %>% arrange(desc(X1))
}
li[3]
li2 <- list(data.frame(Nixon=NA, Count =NA),
data.frame(Obama=NA, Count =NA),
data.frame(roosevelt=NA, Count =NA),
data.frame(TonyB=NA, Count =NA),
data.frame(Trump=NA, Count =NA))
li2[0]
li2[1]
range(5)
range(0,5)
1:5
li2[i] <- li[i] %>% arrange(desc(X1))
for (i in 1:5) {
li2[i] <- li[i] %>% arrange(desc(X1))
}
li <- list(nixon, obama, roosevelt, tonyb, trump)
li2 <- list(data.frame(Nixon=NA, Count =NA),
data.frame(Obama=NA, Count =NA),
data.frame(roosevelt=NA, Count =NA),
data.frame(TonyB=NA, Count =NA),
data.frame(Trump=NA, Count =NA))
for (i in 1:5) {
li2[i] <- li[i] %>% arrange(desc(X1))
}
li2[0] <- i %>% arrange(desc(X1))
for (i in li) {
li2[0] <- i %>% arrange(desc(X1))
}
li2[0]
for (i in li) {
li2[1] <- i %>% arrange(desc(X1))
}
li2[1]
li[1]
li[1] %>% arrange(desc(X1))
nixon <- read.csv("test_nixon.csv", col_names=c("Nixon", "count"), stringsAsFactors = F)
nixon <- read.csv("test_nixon.csv", col_names=c("Nixon", "count"), col_types = cols(col_character(), col_double()), stringsAsFactors = F)
colnames(nixon) <- c("nixon", "count")
colnames(nixon) <- c("nixon", "count")
colnames(nixon) <- c("nixon", "count")
colnames(obama) <- c("obama", "count")
colnames(roosevelt) <- c("roose", "count")
colnames(tonyb) <- c("tonyb", "count")
colnames(trump) <- c("trump", "count")
head(nixon)
nixon <- read.csv("test_nixon.csv", stringsAsFactors = F) %>%
arrange(desc(X1))
head(nixon)
nixon <- read.csv("test_nixon.csv", stringsAsFactors = F) %>%
arrange(desc(X1)) %>%
filter(X1 < 10)
head(nixon)
nixon <- read.csv("test_nixon.csv", stringsAsFactors = F) %>%
arrange(desc(X1)) %>%
filter(X1 >= 10)
head(nixon)
nrow(nixon)
nixon <- read.csv("test_nixon.csv", stringsAsFactors = F) %>%
arrange(desc(X1)) %>%
head(100)
nixon <- read.csv("test_nixon.csv", stringsAsFactors = F) %>%
arrange(desc(X1)) %>%
head(100)
obama <- read.csv("test_obama.csv", stringsAsFactors = F) %>%
arrange(desc(X1)) %>%
head(100)
roosevelt <- read.csv("test_roosevelt.csv", stringsAsFactors = F) %>%
arrange(desc(X1)) %>%
head(100)
tonyb <- read.csv("test_tony.csv", stringsAsFactors = F) %>%
arrange(desc(X1)) %>%
head(100)
trump <- read.csv("test_trump.csv", stringsAsFactors = F) %>%
arrange(desc(X1)) %>%
head(100)
colnames(nixon) <- c("nixon", "count")
colnames(obama) <- c("obama", "count")
colnames(roosevelt) <- c("roose", "count")
colnames(tonyb) <- c("tonyb", "count")
colnames(trump) <- c("trump", "count")
wordcloud2(nixon, size =1.4)
obama <- read.csv("test_obama.csv", stringsAsFactors = F) %>%
arrange(desc(X1)) %>%
head(100)
head(obama)
nixon <- read.csv("test_nixon.csv", stringsAsFactors = F)
head(nixon)
colnames(nixon) <- c("nixon", "count") %>%
filter(!nixon %in% c("2"))
arrange(desc(X1)) %>%
head(100)
arrange(desc(count)) %>%
head(100)
colnames(nixon) <- c("nixon", "count") %>%
filter([1] %in% c("2"))
colnames(nixon) <- c("nixon", "count") %>%
filter(!nixon %in% c("2")) %>%
head(100)
nixon <- read.csv("test_nixon.csv",header = T, stringsAsFactors = F)
head(nixon)
nixon <- read.csv("test_nixon.csv",header = T, stringsAsFactors = F) %>%
filter(word %in% c("a","the")) %>%
arrange(desc(count)) %>%
head(100)
nrow(nixon)
nixon <- read.csv("test_nixon.csv",header = T, stringsAsFactors = F) %>%
filter(word %in% c("a","the")) %>%
arrange(desc(count))
nrow(nixon)
nixon
nixon <- read.csv("test_nixon.csv",header = T, stringsAsFactors = F) %>%
filter(!word %in% c("a","the")) %>%
arrange(desc(count))
nrow(nixon)
head(nixon)
rmwords <- c("a", "the", "A", "The", "and","but","And", "But",
"is", "are","Is","Are","was", "were","Was", "Were")
nixon <- read.csv("test_nixon.csv",header = T, stringsAsFactors = F) %>%
filter(!word %in% rmwords) %>%
arrange(desc(count))
head(nixon)
rmwords <- c("a", "the", "A", "The", "and","but","And", "But",
"is", "are","Is","Are","was", "were","Was", "Were",
"of", "in","this","that")
nixon <- read.csv("test_nixon.csv",header = T, stringsAsFactors = F) %>%
filter(!word %in% rmwords) %>%
arrange(desc(count))
head(nixon)
dfs <- list(nixon, obama, roosevelt, tonyb, trump)
wordcloud2(i, size =1.6)
for (i in dfs){
wordcloud2(i, size =1.6)
}
wordclouds <- c(wourdclouds, wordcloud2(i, size =1.6))
wordclodus <- c()
for (i in dfs){
wordclouds <- c(wourdclouds, wordcloud2(i, size =1.6))
}
wordclouds <- c(wordclouds, wordcloud2(i, size =1.6))
for (i in dfs){
wordclouds <- c(wordclouds, wordcloud2(i, size =1.6))
}
wcs <- c()
wcs <- c(wcs, wordcloud2(i, size =1.6))
for (i in dfs){
wcs <- c(wcs, wordcloud2(i, size =1.6))
}
dfs <- list(nixon, obama, roosevelt, tonyb, trump)
wcs <- c()
for (i in dfs){
wcs <- c(wcs, wordcloud2(i, size =1.6))
}
wcs
print(wcs[1])
plot(wcs[1])
par(mfrow=c(3,2))
for (i in dfs) {
wordcloud2(i, size =1.6)
}
par(mfrow=c(3,2))
for (i in dfs) {
wordcloud2(i, size =1.6)
}
par(mfrow=c(3,2))
for (i in dfs) {
print(wordcloud2(i, size =1.6))
}
rmwords <- c("a", "the", "A", "The", "and","but","And", "But",
"is", "are","Is","Are","was", "were","Was", "Were",
"of", "in","this","that")
nixon <- read.csv("test_nixon.csv",header = T, stringsAsFactors = F) %>%
filter(!word %in% rmwords) %>%
arrange(desc(count))
head(nixon)
obama <- read.csv("test_obama.csv", header = T,stringsAsFactors = F) %>%
filter(!word %in% rmwords) %>%
arrange(desc(count))
roosevelt <- read.csv("test_roosevelt.csv", header = T,stringsAsFactors = F)%>%
filter(!word %in% rmwords) %>%
arrange(desc(count))
tonyb <- read.csv("test_tony.csv",header = T, stringsAsFactors = F) %>%
filter(!word %in% rmwords) %>%
arrange(desc(count))
trump <- read.csv("test_trump.csv", header = T,stringsAsFactors = F)%>%
filter(!word %in% rmwords) %>%
arrange(desc(count))
dfs <- list(nixon, obama, roosevelt, tonyb, trump)
wcs <- c()
par(mfrow=c(3,2))
for (i in dfs) {
print(wordcloud2(i, size =1.6))
}
for (i in dfs) {
print(wordcloud2(i, size =1.6))
}
par(mfrow=c(3,2))
wordcloud2(nixon, size =1.6))
wordcloud2(nixon, size =1.6)
nixon <- read.csv("test_nixon.csv",header = T, stringsAsFactors = F) %>%
filter(!word %in% rmwords) %>%
arrange(desc(count)) %>%
head(200)
obama <- read.csv("test_obama.csv", header = T,stringsAsFactors = F) %>%
filter(!word %in% rmwords) %>%
arrange(desc(count))  %>%
head(200)
roosevelt <- read.csv("test_roosevelt.csv", header = T,stringsAsFactors = F)%>%
filter(!word %in% rmwords) %>%
arrange(desc(count))  %>%
head(200)
tonyb <- read.csv("test_tony.csv",header = T, stringsAsFactors = F) %>%
filter(!word %in% rmwords) %>%
arrange(desc(count))  %>%
head(200)
trump <- read.csv("test_trump.csv", header = T,stringsAsFactors = F)%>%
filter(!word %in% rmwords) %>%
arrange(desc(count))  %>%
head(200)
dfs <- list(nixon, obama, roosevelt, tonyb, trump)
wcs <- c()
par(mfrow=c(3,2))
wordcloud2(nixon, size =1.6)
class(nixon[1])
sub <- function (c){
lapply(c, function(x) gsub("I", "", c))
}
sub <- function (nixon[1]){
lapply(c, function(x) gsub("I", "", c))
}
sub <- function (nixon[1]){
lapply(c, function(x) gsub("I", "", c))
}
sub <- function (nixon$word){
lapply(c, function(x) gsub("I", "", c))
}
sub <- function (c){
lapply(c, function(x) gsub("I", "", c))
}
sub(nixon$word)
sub <- function (c){
a <- c
a <- lapply(a, function(x) tolower(a))
for (i in rmwords) {
a<-lapply(a, function(x) gsub(i, "", a))
}
lapply(c, )
}
sub(nixon$word)
